pipeline {
    agent any
    environment {
        NODE_IMAGE = 'node:22.8'
    }
    parameters {
        string(name: 'BRANCH', defaultValue: 'master', description: 'branch to build on')
        string(name: 'REPO', defaultValue: 'https://github.com/raph0222/vue-docker-jenkins-personal.git', description: 'repo to use')
        // select server and will choose credentials accordingly
        choice(name: 'SERVER_TO_DEPLOY', choices: ['ec2-instance', 'test-instance'], description: 'target server to deploy')
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: "${params.BRANCH}", url: "${params.REPO}"
            }
        }
        stage('Install Dependencies') {
            steps {
                script {
                    docker.image(NODE_IMAGE).inside {
                        dir('front') {
                            sh 'npm install'
                        }
                    }
                }
            }
        }
        stage('Build') {
            steps {
                script {
                    docker.image(NODE_IMAGE).inside {
                        dir('front') {
                            sh 'npm run build'
                        }
                    }
                }
            }
        }
        stage('Deploy to EC2 & Restart Apache') {
            steps {
                script {
                    // pick up credentials ID values associated with the server
                    def ec2HostCredentials = SERVER_TO_DEPLOY == 'ec2-instance' ? 'credentials-ec2-host' : 'credentials-test-host'
                    def ec2KeyCredentials = SERVER_TO_DEPLOY == 'ec2-instance' ? 'credentials-ec2-ssh-key' : 'credentials-test-ssh-key'
                    def ec2UserCredentials = SERVER_TO_DEPLOY == 'ec2-instance' ? 'credentials-ec2-user' : 'credentials-test-user'

                    withCredentials([
                        string(credentialsId: ec2HostCredentials, variable: 'EC2_HOST'),
                        string(credentialsId: ec2UserCredentials, variable: 'EC2_USER'),
                        sshUserPrivateKey(credentialsId: ec2KeyCredentials, keyFileVariable: 'EC2_KEY')
                    ]) {
                        sh """
                            scp -r ${WORKSPACE}/front/dist/* ec2-user@${EC2_HOST}:/var/www/html
                            ssh ${EC2_USER}@${EC2_HOST} 'sudo systemctl restart httpd'
                        """
                    }
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}
